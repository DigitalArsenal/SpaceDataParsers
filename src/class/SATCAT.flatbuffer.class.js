// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @enum {number}
 */
var objType = {
  /**
   *0
   */
  PAYLOAD: 0,

  /**
   *1
   */
  DEBRIS: 1,

  /**
   *2
   */
  ROCKET_BODY: 2,

  /**
   *3
   */
  UNKNOWN: 3
};

/**
 * @enum {string}
 */
var objTypeName = {
  /**
   *0
   */
  '0': 'PAYLOAD',

  /**
   *1
   */
  '1': 'DEBRIS',

  /**
   *2
   */
  '2': 'ROCKET_BODY',

  /**
   *3
   */
  '3': 'UNKNOWN'
};

/**
 * @enum {number}
 */
var opsStatusCode = {
  /**
   *+
   */
  OPERATIONAL: 0,

  /**
   *-
   */
  NONOPERATIONAL: 1,

  /**
   *P
   */
  PARTIALLY_OPERATIONAL: 2,

  /**
   *B
   */
  BACKUP_STANDBY: 3,

  /**
   *S
   */
  SPARE: 4,

  /**
   *X
   */
  EXTENDED_MISSION: 5,

  /**
   *D
   */
  DECAYED: 6,

  /**
   *?
   */
  UNKNOWN: 7
};

/**
 * @enum {string}
 */
var opsStatusCodeName = {
  /**
   *+
   */
  '0': 'OPERATIONAL',

  /**
   *-
   */
  '1': 'NONOPERATIONAL',

  /**
   *P
   */
  '2': 'PARTIALLY_OPERATIONAL',

  /**
   *B
   */
  '3': 'BACKUP_STANDBY',

  /**
   *S
   */
  '4': 'SPARE',

  /**
   *X
   */
  '5': 'EXTENDED_MISSION',

  /**
   *D
   */
  '6': 'DECAYED',

  /**
   *?
   */
  '7': 'UNKNOWN'
};

/**
 * @enum {number}
 */
var orbitalStatusCode = {
  /**
   *NCE
   */
  NO_CURRENT_ELEMENTS: 0,

  /**
   *NIE
   */
  NO_INITIAL_ELEMENTS: 1,

  /**
   *NEA
   */
  NO_ELEMENTS_AVAILABLE: 2,

  /**
   *DOC
   */
  PERMANENTLY_DOCKED: 3,

  /**
   *ISS
   */
  DOCKED_TO_INTERNATIONAL_SPACE_STATION: 4,

  /**
   *XXN
   */
  IN_ORBIT: 5
};

/**
 * @enum {string}
 */
var orbitalStatusCodeName = {
  /**
   *NCE
   */
  '0': 'NO_CURRENT_ELEMENTS',

  /**
   *NIE
   */
  '1': 'NO_INITIAL_ELEMENTS',

  /**
   *NEA
   */
  '2': 'NO_ELEMENTS_AVAILABLE',

  /**
   *DOC
   */
  '3': 'PERMANENTLY_DOCKED',

  /**
   *ISS
   */
  '4': 'DOCKED_TO_INTERNATIONAL_SPACE_STATION',

  /**
   *XXN
   */
  '5': 'IN_ORBIT'
};

/**
 * @enum {number}
 */
var orbitCenter = {
  /**
   *AS
   */
  ASTEROID: 0,

  /**
   *EA
   */
  EARTH: 1,

  /**
   *EL
   */
  EARTH_LAGRANGE: 2,

  /**
   *EM
   */
  EARTH_MOON_BARYCENTER: 3,

  /**
   *JU
   */
  JUPITER: 4,

  /**
   *MA
   */
  MARS: 5,

  /**
   *ME
   */
  MERCURY: 6,

  /**
   *MO
   */
  MOON_EARTH: 7,

  /**
   *NE
   */
  NEPTUNE: 8,

  /**
   *PL
   */
  PLUTO: 9,

  /**
   *SA
   */
  SATURN: 10,

  /**
   *SS
   */
  SOLAR_SYSTEM_ESCAPE: 11,

  /**
   *SU
   */
  SUN: 12,

  /**
   *UR
   */
  URANUS: 13,

  /**
   *VE
   */
  VENUS: 14
};

/**
 * @enum {string}
 */
var orbitCenterName = {
  /**
   *AS
   */
  '0': 'ASTEROID',

  /**
   *EA
   */
  '1': 'EARTH',

  /**
   *EL
   */
  '2': 'EARTH_LAGRANGE',

  /**
   *EM
   */
  '3': 'EARTH_MOON_BARYCENTER',

  /**
   *JU
   */
  '4': 'JUPITER',

  /**
   *MA
   */
  '5': 'MARS',

  /**
   *ME
   */
  '6': 'MERCURY',

  /**
   *MO
   */
  '7': 'MOON_EARTH',

  /**
   *NE
   */
  '8': 'NEPTUNE',

  /**
   *PL
   */
  '9': 'PLUTO',

  /**
   *SA
   */
  '10': 'SATURN',

  /**
   *SS
   */
  '11': 'SOLAR_SYSTEM_ESCAPE',

  /**
   *SU
   */
  '12': 'SUN',

  /**
   *UR
   */
  '13': 'URANUS',

  /**
   *VE
   */
  '14': 'VENUS'
};

/**
 * @enum {number}
 */
var orbitType = {
  /**
   *0
   */
  ORBIT: 0,

  /**
   *1
   */
  DOCKED: 1,

  /**
   *2
   */
  LANDING: 2,

  /**
   *3
   */
  IMPACT: 3
};

/**
 * @enum {string}
 */
var orbitTypeName = {
  /**
   *0
   */
  '0': 'ORBIT',

  /**
   *1
   */
  '1': 'DOCKED',

  /**
   *2
   */
  '2': 'LANDING',

  /**
   *3
   */
  '3': 'IMPACT'
};

/**
 * @enum {number}
 */
var massType = {
  DRY: 0,
  WET: 1
};

/**
 * @enum {string}
 */
var massTypeName = {
  '0': 'DRY',
  '1': 'WET'
};

/**
 * @constructor
 */
function SATCAT() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
}

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {SATCAT}
 */
SATCAT.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SATCAT=} obj
 * @returns {SATCAT}
 */
SATCAT.getRootAsSATCAT = function(bb, obj) {
  return (obj || new SATCAT).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SATCAT=} obj
 * @returns {SATCAT}
 */
SATCAT.getSizePrefixedRootAsSATCAT = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SATCAT).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SATCAT.prototype.OBJECT_NAME = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SATCAT.prototype.OBJECT_ID = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
SATCAT.prototype.NORAD_CAT_ID = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param {number} value
 * @returns {boolean}
 */
SATCAT.prototype.mutate_NORAD_CAT_ID = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 8);

  if (offset === 0) {
    return false;
  }

  this.bb.writeUint32(this.bb_pos + offset, value);
  return true;
};

/**
 * @returns {boolean}
 */
SATCAT.prototype.MULTIPLE_NAMES = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {boolean} value
 * @returns {boolean}
 */
SATCAT.prototype.mutate_MULTIPLE_NAMES = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 10);

  if (offset === 0) {
    return false;
  }

  this.bb.writeInt8(this.bb_pos + offset, value);
  return true;
};

/**
 * @returns {objType}
 */
SATCAT.prototype.OBJECT_TYPE = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? /** @type {objType} */ (this.bb.readInt8(this.bb_pos + offset)) : objType.UNKNOWN;
};

/**
 * @param {objType} value
 * @returns {boolean}
 */
SATCAT.prototype.mutate_OBJECT_TYPE = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 12);

  if (offset === 0) {
    return false;
  }

  this.bb.writeInt8(this.bb_pos + offset, value);
  return true;
};

/**
 * @returns {opsStatusCode}
 */
SATCAT.prototype.OPS_STATUS_CODE = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? /** @type {opsStatusCode} */ (this.bb.readInt8(this.bb_pos + offset)) : opsStatusCode.UNKNOWN;
};

/**
 * @param {opsStatusCode} value
 * @returns {boolean}
 */
SATCAT.prototype.mutate_OPS_STATUS_CODE = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 14);

  if (offset === 0) {
    return false;
  }

  this.bb.writeInt8(this.bb_pos + offset, value);
  return true;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SATCAT.prototype.OWNER = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SATCAT.prototype.LAUNCH_DATE = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SATCAT.prototype.LAUNCH_SITE = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 20);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SATCAT.prototype.DECAY_DATE = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 22);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
SATCAT.prototype.PERIOD = function() {
  var offset = this.bb.__offset(this.bb_pos, 24);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {number} value
 * @returns {boolean}
 */
SATCAT.prototype.mutate_PERIOD = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 24);

  if (offset === 0) {
    return false;
  }

  this.bb.writeFloat32(this.bb_pos + offset, value);
  return true;
};

/**
 * @returns {number}
 */
SATCAT.prototype.INCLINATION = function() {
  var offset = this.bb.__offset(this.bb_pos, 26);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {number} value
 * @returns {boolean}
 */
SATCAT.prototype.mutate_INCLINATION = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 26);

  if (offset === 0) {
    return false;
  }

  this.bb.writeFloat32(this.bb_pos + offset, value);
  return true;
};

/**
 * @returns {number}
 */
SATCAT.prototype.APOGEE = function() {
  var offset = this.bb.__offset(this.bb_pos, 28);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {number} value
 * @returns {boolean}
 */
SATCAT.prototype.mutate_APOGEE = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 28);

  if (offset === 0) {
    return false;
  }

  this.bb.writeFloat32(this.bb_pos + offset, value);
  return true;
};

/**
 * @returns {number}
 */
SATCAT.prototype.PERIGEE = function() {
  var offset = this.bb.__offset(this.bb_pos, 30);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {number} value
 * @returns {boolean}
 */
SATCAT.prototype.mutate_PERIGEE = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 30);

  if (offset === 0) {
    return false;
  }

  this.bb.writeFloat32(this.bb_pos + offset, value);
  return true;
};

/**
 * @returns {number}
 */
SATCAT.prototype.RCS = function() {
  var offset = this.bb.__offset(this.bb_pos, 32);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {number} value
 * @returns {boolean}
 */
SATCAT.prototype.mutate_RCS = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 32);

  if (offset === 0) {
    return false;
  }

  this.bb.writeFloat32(this.bb_pos + offset, value);
  return true;
};

/**
 * @returns {orbitalStatusCode}
 */
SATCAT.prototype.DATA_STATUS_CODE = function() {
  var offset = this.bb.__offset(this.bb_pos, 34);
  return offset ? /** @type {orbitalStatusCode} */ (this.bb.readInt8(this.bb_pos + offset)) : orbitalStatusCode.NO_CURRENT_ELEMENTS;
};

/**
 * @param {orbitalStatusCode} value
 * @returns {boolean}
 */
SATCAT.prototype.mutate_DATA_STATUS_CODE = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 34);

  if (offset === 0) {
    return false;
  }

  this.bb.writeInt8(this.bb_pos + offset, value);
  return true;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SATCAT.prototype.ORBIT_CENTER = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 36);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {orbitType}
 */
SATCAT.prototype.ORBIT_TYPE = function() {
  var offset = this.bb.__offset(this.bb_pos, 38);
  return offset ? /** @type {orbitType} */ (this.bb.readInt8(this.bb_pos + offset)) : orbitType.ORBIT;
};

/**
 * @param {orbitType} value
 * @returns {boolean}
 */
SATCAT.prototype.mutate_ORBIT_TYPE = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 38);

  if (offset === 0) {
    return false;
  }

  this.bb.writeInt8(this.bb_pos + offset, value);
  return true;
};

/**
 * @param {flatbuffers.Builder} builder
 */
SATCAT.startSATCAT = function(builder) {
  builder.startObject(18);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} OBJECT_NAMEOffset
 */
SATCAT.addOBJECT_NAME = function(builder, OBJECT_NAMEOffset) {
  builder.addFieldOffset(0, OBJECT_NAMEOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} OBJECT_IDOffset
 */
SATCAT.addOBJECT_ID = function(builder, OBJECT_IDOffset) {
  builder.addFieldOffset(1, OBJECT_IDOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} NORAD_CAT_ID
 */
SATCAT.addNORAD_CAT_ID = function(builder, NORAD_CAT_ID) {
  builder.addFieldInt32(2, NORAD_CAT_ID, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} MULTIPLE_NAMES
 */
SATCAT.addMULTIPLE_NAMES = function(builder, MULTIPLE_NAMES) {
  builder.addFieldInt8(3, +MULTIPLE_NAMES, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {objType} OBJECT_TYPE
 */
SATCAT.addOBJECT_TYPE = function(builder, OBJECT_TYPE) {
  builder.addFieldInt8(4, OBJECT_TYPE, objType.UNKNOWN);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {opsStatusCode} OPS_STATUS_CODE
 */
SATCAT.addOPS_STATUS_CODE = function(builder, OPS_STATUS_CODE) {
  builder.addFieldInt8(5, OPS_STATUS_CODE, opsStatusCode.UNKNOWN);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} OWNEROffset
 */
SATCAT.addOWNER = function(builder, OWNEROffset) {
  builder.addFieldOffset(6, OWNEROffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} LAUNCH_DATEOffset
 */
SATCAT.addLAUNCH_DATE = function(builder, LAUNCH_DATEOffset) {
  builder.addFieldOffset(7, LAUNCH_DATEOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} LAUNCH_SITEOffset
 */
SATCAT.addLAUNCH_SITE = function(builder, LAUNCH_SITEOffset) {
  builder.addFieldOffset(8, LAUNCH_SITEOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} DECAY_DATEOffset
 */
SATCAT.addDECAY_DATE = function(builder, DECAY_DATEOffset) {
  builder.addFieldOffset(9, DECAY_DATEOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} PERIOD
 */
SATCAT.addPERIOD = function(builder, PERIOD) {
  builder.addFieldFloat32(10, PERIOD, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} INCLINATION
 */
SATCAT.addINCLINATION = function(builder, INCLINATION) {
  builder.addFieldFloat32(11, INCLINATION, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} APOGEE
 */
SATCAT.addAPOGEE = function(builder, APOGEE) {
  builder.addFieldFloat32(12, APOGEE, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} PERIGEE
 */
SATCAT.addPERIGEE = function(builder, PERIGEE) {
  builder.addFieldFloat32(13, PERIGEE, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} RCS
 */
SATCAT.addRCS = function(builder, RCS) {
  builder.addFieldFloat32(14, RCS, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {orbitalStatusCode} DATA_STATUS_CODE
 */
SATCAT.addDATA_STATUS_CODE = function(builder, DATA_STATUS_CODE) {
  builder.addFieldInt8(15, DATA_STATUS_CODE, orbitalStatusCode.NO_CURRENT_ELEMENTS);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} ORBIT_CENTEROffset
 */
SATCAT.addORBIT_CENTER = function(builder, ORBIT_CENTEROffset) {
  builder.addFieldOffset(16, ORBIT_CENTEROffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {orbitType} ORBIT_TYPE
 */
SATCAT.addORBIT_TYPE = function(builder, ORBIT_TYPE) {
  builder.addFieldInt8(17, ORBIT_TYPE, orbitType.ORBIT);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
SATCAT.endSATCAT = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
SATCAT.finishSATCATBuffer = function(builder, offset) {
  builder.finish(offset);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
SATCAT.finishSizePrefixedSATCATBuffer = function(builder, offset) {
  builder.finish(offset, undefined, true);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} OBJECT_NAMEOffset
 * @param {flatbuffers.Offset} OBJECT_IDOffset
 * @param {number} NORAD_CAT_ID
 * @param {boolean} MULTIPLE_NAMES
 * @param {objType} OBJECT_TYPE
 * @param {opsStatusCode} OPS_STATUS_CODE
 * @param {flatbuffers.Offset} OWNEROffset
 * @param {flatbuffers.Offset} LAUNCH_DATEOffset
 * @param {flatbuffers.Offset} LAUNCH_SITEOffset
 * @param {flatbuffers.Offset} DECAY_DATEOffset
 * @param {number} PERIOD
 * @param {number} INCLINATION
 * @param {number} APOGEE
 * @param {number} PERIGEE
 * @param {number} RCS
 * @param {orbitalStatusCode} DATA_STATUS_CODE
 * @param {flatbuffers.Offset} ORBIT_CENTEROffset
 * @param {orbitType} ORBIT_TYPE
 * @returns {flatbuffers.Offset}
 */
SATCAT.createSATCAT = function(builder, OBJECT_NAMEOffset, OBJECT_IDOffset, NORAD_CAT_ID, MULTIPLE_NAMES, OBJECT_TYPE, OPS_STATUS_CODE, OWNEROffset, LAUNCH_DATEOffset, LAUNCH_SITEOffset, DECAY_DATEOffset, PERIOD, INCLINATION, APOGEE, PERIGEE, RCS, DATA_STATUS_CODE, ORBIT_CENTEROffset, ORBIT_TYPE) {
  SATCAT.startSATCAT(builder);
  SATCAT.addOBJECT_NAME(builder, OBJECT_NAMEOffset);
  SATCAT.addOBJECT_ID(builder, OBJECT_IDOffset);
  SATCAT.addNORAD_CAT_ID(builder, NORAD_CAT_ID);
  SATCAT.addMULTIPLE_NAMES(builder, MULTIPLE_NAMES);
  SATCAT.addOBJECT_TYPE(builder, OBJECT_TYPE);
  SATCAT.addOPS_STATUS_CODE(builder, OPS_STATUS_CODE);
  SATCAT.addOWNER(builder, OWNEROffset);
  SATCAT.addLAUNCH_DATE(builder, LAUNCH_DATEOffset);
  SATCAT.addLAUNCH_SITE(builder, LAUNCH_SITEOffset);
  SATCAT.addDECAY_DATE(builder, DECAY_DATEOffset);
  SATCAT.addPERIOD(builder, PERIOD);
  SATCAT.addINCLINATION(builder, INCLINATION);
  SATCAT.addAPOGEE(builder, APOGEE);
  SATCAT.addPERIGEE(builder, PERIGEE);
  SATCAT.addRCS(builder, RCS);
  SATCAT.addDATA_STATUS_CODE(builder, DATA_STATUS_CODE);
  SATCAT.addORBIT_CENTER(builder, ORBIT_CENTEROffset);
  SATCAT.addORBIT_TYPE(builder, ORBIT_TYPE);
  return SATCAT.endSATCAT(builder);
}

/**
 * @constructor
 */
function PAYLOAD() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
}

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {PAYLOAD}
 */
PAYLOAD.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {PAYLOAD=} obj
 * @returns {PAYLOAD}
 */
PAYLOAD.getRootAsPAYLOAD = function(bb, obj) {
  return (obj || new PAYLOAD).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {PAYLOAD=} obj
 * @returns {PAYLOAD}
 */
PAYLOAD.getSizePrefixedRootAsPAYLOAD = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PAYLOAD).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
PAYLOAD.prototype.OBJECT_ID = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
PAYLOAD.prototype.OBJECT_NAME = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
PAYLOAD.prototype.DEPLOYMENT_DATE = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {boolean}
 */
PAYLOAD.prototype.MANEUVERABLE = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {boolean} value
 * @returns {boolean}
 */
PAYLOAD.prototype.mutate_MANEUVERABLE = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 10);

  if (offset === 0) {
    return false;
  }

  this.bb.writeInt8(this.bb_pos + offset, value);
  return true;
};

/**
 * @returns {number}
 */
PAYLOAD.prototype.SIZE = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {number} value
 * @returns {boolean}
 */
PAYLOAD.prototype.mutate_SIZE = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 12);

  if (offset === 0) {
    return false;
  }

  this.bb.writeFloat32(this.bb_pos + offset, value);
  return true;
};

/**
 * @returns {number}
 */
PAYLOAD.prototype.MASS = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {number} value
 * @returns {boolean}
 */
PAYLOAD.prototype.mutate_MASS = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 14);

  if (offset === 0) {
    return false;
  }

  this.bb.writeFloat32(this.bb_pos + offset, value);
  return true;
};

/**
 * @returns {massType}
 */
PAYLOAD.prototype.MASS_TYPE = function() {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? /** @type {massType} */ (this.bb.readInt8(this.bb_pos + offset)) : massType.DRY;
};

/**
 * @param {massType} value
 * @returns {boolean}
 */
PAYLOAD.prototype.mutate_MASS_TYPE = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 16);

  if (offset === 0) {
    return false;
  }

  this.bb.writeInt8(this.bb_pos + offset, value);
  return true;
};

/**
 * @param {flatbuffers.Builder} builder
 */
PAYLOAD.startPAYLOAD = function(builder) {
  builder.startObject(7);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} OBJECT_IDOffset
 */
PAYLOAD.addOBJECT_ID = function(builder, OBJECT_IDOffset) {
  builder.addFieldOffset(0, OBJECT_IDOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} OBJECT_NAMEOffset
 */
PAYLOAD.addOBJECT_NAME = function(builder, OBJECT_NAMEOffset) {
  builder.addFieldOffset(1, OBJECT_NAMEOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} DEPLOYMENT_DATEOffset
 */
PAYLOAD.addDEPLOYMENT_DATE = function(builder, DEPLOYMENT_DATEOffset) {
  builder.addFieldOffset(2, DEPLOYMENT_DATEOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} MANEUVERABLE
 */
PAYLOAD.addMANEUVERABLE = function(builder, MANEUVERABLE) {
  builder.addFieldInt8(3, +MANEUVERABLE, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} SIZE
 */
PAYLOAD.addSIZE = function(builder, SIZE) {
  builder.addFieldFloat32(4, SIZE, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} MASS
 */
PAYLOAD.addMASS = function(builder, MASS) {
  builder.addFieldFloat32(5, MASS, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {massType} MASS_TYPE
 */
PAYLOAD.addMASS_TYPE = function(builder, MASS_TYPE) {
  builder.addFieldInt8(6, MASS_TYPE, massType.DRY);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
PAYLOAD.endPAYLOAD = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} OBJECT_IDOffset
 * @param {flatbuffers.Offset} OBJECT_NAMEOffset
 * @param {flatbuffers.Offset} DEPLOYMENT_DATEOffset
 * @param {boolean} MANEUVERABLE
 * @param {number} SIZE
 * @param {number} MASS
 * @param {massType} MASS_TYPE
 * @returns {flatbuffers.Offset}
 */
PAYLOAD.createPAYLOAD = function(builder, OBJECT_IDOffset, OBJECT_NAMEOffset, DEPLOYMENT_DATEOffset, MANEUVERABLE, SIZE, MASS, MASS_TYPE) {
  PAYLOAD.startPAYLOAD(builder);
  PAYLOAD.addOBJECT_ID(builder, OBJECT_IDOffset);
  PAYLOAD.addOBJECT_NAME(builder, OBJECT_NAMEOffset);
  PAYLOAD.addDEPLOYMENT_DATE(builder, DEPLOYMENT_DATEOffset);
  PAYLOAD.addMANEUVERABLE(builder, MANEUVERABLE);
  PAYLOAD.addSIZE(builder, SIZE);
  PAYLOAD.addMASS(builder, MASS);
  PAYLOAD.addMASS_TYPE(builder, MASS_TYPE);
  return PAYLOAD.endPAYLOAD(builder);
}

// Exports for ECMAScript6 Modules
export {objType};
export {objTypeName};
export {opsStatusCode};
export {opsStatusCodeName};
export {orbitalStatusCode};
export {orbitalStatusCodeName};
export {orbitCenter};
export {orbitCenterName};
export {orbitType};
export {orbitTypeName};
export {massType};
export {massTypeName};
export {SATCAT};
export {PAYLOAD};
